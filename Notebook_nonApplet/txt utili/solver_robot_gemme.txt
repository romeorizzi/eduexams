def conta_gemme(env):
    r=len(env)
    c=len(env[0])
    mat = []
    for i in range(0,r):
        mat.append([0 for j in range(0,c)])
    for i in range(1,r):
        for j in range(1,c):
            if mappa[i][j]==-1 or (mappa[i][j-1]==-1 and mappa[i-1][j]==-1):
                mat[i][j]=0
            else:
                mat[i][j]=max(mat[i][j-1], mat[i-1][j])+mappa[i][j]               
    return mat
    

def conta_gemme_with_opt(env):
    r=len(env)
    c=len(env[0])
    mat = []
    for i in range(0,r):
        mat.append([(0,0) for j in range(0,c)])
    for i in range(1,r):
        for j in range(1,c):
            if mappa[i][j]==-1 or (mappa[i][j-1]==-1 and mappa[i-1][j]==-1):
                mat[i][j]=(0,0)
            else:
                if i==1 or j==1:
                    mat[i][j]=(max(mat[i][j-1][0],mat[i-1][j][0])+mappa[i][j],1) 
                else:        
                    if mat[i][j-1][0]==mat[i-1][j][0]:
                        mat[i][j]=(mat[i][j-1][0]+mappa[i][j],mat[i][j-1][1]+mat[i][j-1][1])
                    elif mat[i][j-1][0]>mat[i-1][j][0]:
                        mat[i][j]=(mat[i][j-1][0]+mappa[i][j],mat[i][j-1][1])
                    else:
                        mat[i][j]=(mat[i-1][j][0]+mappa[i][j],mat[i-1][j][1])                
    return mat
    
 def conta_gemme_rev(env):
    r=len(env)+1
    c=len(env[0])+1
    mat = []
    for i in range(0,r):
        mat.append([0 for j in range(0,c)])
    for i in range(r-2,0,-1):
        for j in range(c-2,0,-1):
            if mappa[i][j]!=-1:
                mat[i][j]=max(mat[i][j+1], mat[i+1][j])+mappa[i][j]
            else:
                mat[i][j]=0
    return mat
    
come env passo mappa (ricordo che mappa è campo_minato con una riga e una colonna in più)


