#dictionary_of_types = {
#   "SV": ("implemented", "Trovare quanto vale la <b>somma massima dei valori</b> degli elementi."),
#  "QE": ("implemented", "Fornire <b>il sottoinsieme degli elementi </b> tale che massimizzi la somma dei valori."),
#    "EE": ("implemented", "Trovare la somma massima dei valori degli elementi  <b> se non si considerano i seguenti elementi {possible_tasks[2]['edr']} </b>."),
#   "CB": ("implemented", "Trovare la somma massima dei valori degli elementi <b> se __B__ diventa {possible_tasks[3]['B2']}</b>."),
#}


name: "knapsack"
title: "Problema dello zaino"
#istanza
B: 36
elementi: ["A","B","C","D","E","F","G","H","I"]
pesi : [15,15,15,13,13,5,5,3,1]
valori : [52,52,52,40,40,17,17,7,8]





#descrivere i tipi di sequenza per l'introduzione e per le richieste

#question_1: "SV"
#question_2: "QE"
#question_3: "EE"
#question_4: "CB"



#qui Ã¨ possibile configurare i parametri dei 5 possibili tasks
possible_tasks:
- {
    type: "SV",
    tot_points: 10,
    ver_points: 10,
  }
- {
    type: "QE",
    tot_points: 10,
    ver_points: 10,
  }
- {
    type: "EE",
    tot_points: 10,
    ver_points: 10,
    edr: ["I"]

  }
- {
    type: "CB",
    tot_points: 10,
    ver_points: 10,
    B2: 33
  }


#inserire true se il task deve essere presente, false se non lo si vuole nel file generato (l'array deve essere sempre della dimensione dei possible_tasks)
tasks_to_create: [True, True, True, True]

...
